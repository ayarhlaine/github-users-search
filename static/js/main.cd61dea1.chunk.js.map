{"version":3,"sources":["GitUser/GitUser.dux.ts","GitUser/GitUser.dispatch.ts","GitUser/getGitUser.ts","GitUser/GitUserService.ts","GitUser/SearchInput/SearchInput.tsx","GitUser/UserAction/UserAction.tsx","GitUser/UserDetail/UserDetail.tsx","GitUser/UserResultList/UserResultList.tsx","GitUser/AppHeader/AppHeader.tsx","GitUser/SocialLink/SocialLink.tsx","GitUser/GitUser.tsx","GitUser/useSubject.ts","App.tsx","serviceWorker.ts","store/index.ts","index.tsx"],"names":["updateSearchTextAction","searchText","action","updateUsersAction","users","updateNoOfApiCallAction","noOfApiCall","updateUserAction","userAction","gitUserReducer","createReducer","handleAction","state","payload","updateSearchText","dispatch","a","updateUsers","updateNoOfApiCall","userActionCall","getGitUsers","axios","get","response","responseData","data","items","updateSearchTextService","callGitAPIService","getState","git_user","git_users","currentTime","DateTime","local","toLocaleString","DATETIME_SHORT","updateUserActionService","SearchInput","onSearchInputChange","className","type","placeholder","value","onChange","event","target","UserAction","UserDetail","user","login","avatar_url","url","src","style","width","height","alt","UserResultList","userList","map","index","key","length","AppHeader","SocialLink","href","inputSubject$","Subject","connect","actions","bindActionCreators","callAction","dataSubscription$","typingSubscription$","useEffect","pipe","debounceTime","subscribe","newSearchText","unsubscribe","useSubject","padding","next","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","middleWareEnhancer","applyMiddleware","thunk","createStore","composeWithDevTools","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd61dea1.chunk.js","sourcesContent":["import { action,createReducer } from 'typesafe-actions';\n\nexport const updateSearchTextAction = (searchText: string) => action('GIT_USER/CHANGE_SEARCH_TEXT', searchText);\nexport const updateUsersAction = (users: Array<GitUsers>) => action('GIT_USER/UPDATE_USERS', users);\nexport const updateNoOfApiCallAction = (noOfApiCall: number) => action('GIT_USER/UPDATE_NO_OF_API_CALL', noOfApiCall);\nexport const updateUserAction = (userAction: string) => action('GIT_USER/UPDATE_USER_ACTION', userAction);\nexport interface GitUsers{\n    login: string,\n    id: number,\n    avatar_url: string,\n    url: string,\n}\nexport interface GitUserProp {\n    searchText: string,\n    users: Array<GitUsers>,\n    noOfApiCall: number,\n    userAction?: string,\n}\nconst initialState: GitUserProp = {\n    searchText: \"\",\n    users: [],\n    noOfApiCall: 0\n};\nexport const gitUserReducer = createReducer(initialState)\n  .handleAction('GIT_USER/CHANGE_SEARCH_TEXT', (state: GitUserProp, action:any) =>\n    ({ ...state, searchText: action.payload }))\n  .handleAction('GIT_USER/UPDATE_USERS', (state: GitUserProp, action:any) =>\n    ({ ...state, users: action.payload }))\n  .handleAction('GIT_USER/UPDATE_NO_OF_API_CALL', (state: GitUserProp, action:any) =>\n    ({ ...state, noOfApiCall: action.payload }))\n  .handleAction('GIT_USER/UPDATE_USER_ACTION', (state: GitUserProp, action:any) =>\n    ({ ...state, userAction: action.payload }))\n  ;","import { Dispatch } from 'redux';\nimport { updateSearchTextAction,updateUsersAction,updateNoOfApiCallAction,updateUserAction,GitUsers } from './GitUser.dux';\nexport const updateSearchText = async (dispatch: Dispatch, searchText: string) => {\n    dispatch(updateSearchTextAction(searchText));\n};\nexport const updateUsers = async (dispatch: Dispatch, users: Array<GitUsers>) => {\n    dispatch(updateUsersAction(users));\n};\nexport const updateNoOfApiCall = async (dispatch: Dispatch, noOfApiCall: number) => {\n    dispatch(updateNoOfApiCallAction(noOfApiCall));\n};\nexport const userActionCall = async (dispatch: Dispatch, userAction: string) => {\n    dispatch(updateUserAction(userAction));\n};","import axios from 'axios';\nimport { GitUsers } from './GitUser.dux';\ninterface GitHubResponse {\n    total_count: number,\n    items: Array<GitUsers>\n}\nexport const getGitUsers = async (searchText: string): Promise<Array<GitUsers>> =>{\n    const response = await axios.get<GitHubResponse>(`https://api.github.com/search/users?q=${searchText}`);\n    const responseData:GitHubResponse = response.data;\n    if(responseData) return responseData.items;\n    return [];\n}","import { Dispatch } from 'redux';\nimport { DateTime } from 'luxon';\nimport { updateSearchText,updateUsers,updateNoOfApiCall,userActionCall } from './GitUser.dispatch';\nimport { AppState } from '../store';\nimport { getGitUsers } from './getGitUser';\nexport const updateSearchTextService = (searchText: string) =>\n  async (dispatch: Dispatch) => {\n    updateSearchText(dispatch,searchText);\n};\nexport const callGitAPIService = (searchText: string) =>\n  async (dispatch: Dispatch, getState: () => AppState) => {\n    const { git_user } = getState();\n    const { noOfApiCall } = git_user;\n    const git_users = await getGitUsers(searchText);\n    updateUsers(dispatch,git_users);\n    updateNoOfApiCall(dispatch,noOfApiCall+1);\n    const currentTime = DateTime.local().toLocaleString(DateTime.DATETIME_SHORT);\n    userActionCall(dispatch,`Last data received at ${currentTime}`);\n};\nexport const updateUserActionService = (userAction: string) =>\n  async (dispatch: Dispatch) => {\n    userActionCall(dispatch,userAction);\n};","import React,{FC} from 'react';\nimport './SearchInput.css';\ninterface SearchInputProp{\n    searchText: string,\n    onSearchInputChange: (searchText: string) => void,\n}\nexport const SearchInput: FC<SearchInputProp> = ({searchText,onSearchInputChange}) => {\n  return (\n    <div className=\"SearchInput__Container\">\n      <input className={'SearchInput'} type=\"text\" placeholder={' Type github user name'} value={searchText} onChange={(event: React.ChangeEvent<HTMLInputElement>) => onSearchInputChange(event.target.value as string)}/>\n    </div>\n  );\n}\nexport default SearchInput;","import React,{FC} from 'react';\nimport './UserAction.css';\ninterface UserActionProp {\n    userAction: string | undefined;\n}\nexport const UserAction: FC<UserActionProp> = ({userAction}) => {\n  return (\n    <p className={'UserAction__Text'}>{userAction}</p>\n  );\n}\nexport default UserAction;","import React,{FC} from 'react';\nimport {GitUsers} from '../GitUser.dux';\ninterface UserDetailProp{\n   user: GitUsers\n}\nexport const UserDetail: FC<UserDetailProp> = ({user}) => {\n  const { login,avatar_url,url } = user;\n  return (\n    <div className=\"UserDetail__Container\">\n        <div>Git User Name : {login}</div>\n        <div>Home Page : {url}</div>\n        <div>Image : <img src={avatar_url} style={{width: 16,height: 16}} alt={'User Profile'}/></div>\n        <hr/>\n    </div>\n  );\n}\nexport default UserDetail;","import React,{FC} from 'react';\nimport {GitUsers} from '../GitUser.dux';\nimport UserDetail from '../UserDetail/UserDetail';\ninterface UserResultListProp{\n   users: Array<GitUsers>,\n   noOfApiCall: number\n}\nexport const UserResultList: FC<UserResultListProp> = ({users, noOfApiCall}) => {\n    const userList = users.map((user,index) =>\n     <UserDetail user={user} key={index}/>\n    );\n  if(users.length <= 0) return <div>\n    <h3>User Results : (called api {noOfApiCall} times)</h3>\n    <p>No Users!</p>\n  </div>\n  return (\n    <div className=\"UserResultList__Container\">\n        <h3>User Results : (called api {noOfApiCall} times)</h3>\n        {userList}\n    </div>\n  );\n}\nexport default UserResultList;","import React,{FC} from 'react';\nimport './AppHeader.css';\nexport const AppHeader: FC<{}> = () => {\n  return (\n    <div className=\"App__Header__Container\">\n      <h3>Sample Github Api Call (React,Redux,RXJS)</h3>\n    </div>\n  );\n}\nexport default AppHeader;","import React,{FC} from 'react';\nimport './SocialLink.css';\nexport const SocialLink: FC<{}> = () => {\n  return (\n    <div className=\"SocialLink__Container\">\n      <h3>Made By: <a href={'https://facebook.com/developerayarhlaine'}>Ayar Hlaine</a></h3>\n    </div>\n  );\n}\nexport default SocialLink;","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { updateSearchTextService,callGitAPIService,updateUserActionService } from './GitUserService';\nimport SearchInput from './SearchInput/SearchInput';\nimport UserAction from './UserAction/UserAction';\nimport UserResultList from './UserResultList/UserResultList';\nimport { GitUsers } from './GitUser.dux';\nimport { Subject } from 'rxjs';\nimport AppHeader from './AppHeader/AppHeader';\nimport SocialLink from './SocialLink/SocialLink';\nimport {useSubject} from './useSubject';\ninterface GitUserProp {\n  searchText: string,\n  users: Array<GitUsers>,\n  noOfApiCall: number,\n  userAction?: string,\n  actions: {\n    updateSearchTextService: typeof updateSearchTextService\n    callGitAPIService: typeof callGitAPIService\n    updateUserActionService: typeof updateUserActionService\n  }\n}\ntype GitUserPropNULL = GitUserProp | null;\n\nconst inputSubject$ = new Subject<string>();\nexport const GitUser: FC<GitUserPropNULL> = ({ searchText, users, noOfApiCall, userAction, actions }) => {\n  useSubject(inputSubject$,actions.callGitAPIService,actions.updateUserActionService);\n  const onInputChange = (searchText: string) => {\n    actions.updateSearchTextService(searchText);\n    inputSubject$.next(searchText);\n  }\n  return (\n    <div className=\"Git__User__Container\" style={{padding: '1rem'}}>\n      <AppHeader />\n      <SearchInput\n        searchText={searchText}\n        onSearchInputChange={onInputChange}\n      />\n      <UserAction userAction={userAction}/>\n      <UserResultList users={users} noOfApiCall={noOfApiCall}/>\n      <SocialLink/>\n    </div>\n  );\n}\nexport const mapStateToProps = ({\n  git_user\n}: {\n    git_user: GitUserProp;\n  }) => {\n  const { searchText, users, noOfApiCall, userAction } = git_user;\n  return { searchText, users, noOfApiCall, userAction }\n};\nexport const mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: {\n    ...bindActionCreators({ updateSearchTextService }, dispatch),\n    ...bindActionCreators({ callGitAPIService }, dispatch),\n    ...bindActionCreators({ updateUserActionService }, dispatch),\n  },\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(GitUser);","import { Subject, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { useEffect } from 'react';\nimport { callGitAPIService,updateUserActionService } from './GitUserService';\nexport const useSubject = (inputSubject$ :Subject<string>,callAction: typeof callGitAPIService,updateUserAction: typeof updateUserActionService) => {\n    let dataSubscription$: Subscription;\n    let typingSubscription$: Subscription;\n    \n    useEffect(() => {\n        // eslint-disable-next-line\n        dataSubscription$ = inputSubject$.pipe(\n            debounceTime(1000)\n        ).subscribe((newSearchText: string) => {\n            updateUserAction('Getting Data from Github ...')\n            callAction(newSearchText);\n        });\n        // eslint-disable-next-line\n        typingSubscription$ = inputSubject$.subscribe((newSearchText: string) => updateUserAction('Typing ...'));\n        return () => { \n            dataSubscription$.unsubscribe();\n            typingSubscription$.unsubscribe();\n        };\n    }, [inputSubject$,callAction]);\n}","import React,{FC} from 'react';\nimport GitUser from './GitUser/GitUser';\ninterface AppProp{\n\n}\nexport const App: FC<AppProp> = () => {\n  return (\n    <div className=\"App\">\n      <GitUser />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport { applyMiddleware,createStore,combineReducers } from 'redux'\nimport { GitUserProp,gitUserReducer } from '../GitUser/GitUser.dux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nexport interface AppState {\n    git_user: GitUserProp;\n  }\nconst rootReducer = combineReducers<AppState> ({\n    git_user: gitUserReducer\n});\n\nexport const configureStore = () =>{\n    const middleWareEnhancer = applyMiddleware(thunk);\n    const store = createStore(\n        rootReducer,\n        composeWithDevTools(middleWareEnhancer)\n    );\n    return store;\n};\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}